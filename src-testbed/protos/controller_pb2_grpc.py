# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import controller_pb2 as controller__pb2


class ControllerStub(object):
  """Missing associated documentation comment in .proto file"""

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Infer = channel.unary_unary(
        '/Controller/Infer',
        request_serializer=controller__pb2.InferenceRequest.SerializeToString,
        response_deserializer=controller__pb2.InferenceResponse.FromString,
        )
    self.Load = channel.unary_unary(
        '/Controller/Load',
        request_serializer=controller__pb2.ModelManageRequest.SerializeToString,
        response_deserializer=controller__pb2.PotentialError.FromString,
        )
    self.Unload = channel.unary_unary(
        '/Controller/Unload',
        request_serializer=controller__pb2.ModelManageRequest.SerializeToString,
        response_deserializer=controller__pb2.PotentialError.FromString,
        )


class ControllerServicer(object):
  """Missing associated documentation comment in .proto file"""

  def Infer(self, request, context):
    """Missing associated documentation comment in .proto file"""
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Load(self, request, context):
    """Missing associated documentation comment in .proto file"""
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Unload(self, request, context):
    """Missing associated documentation comment in .proto file"""
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ControllerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Infer': grpc.unary_unary_rpc_method_handler(
          servicer.Infer,
          request_deserializer=controller__pb2.InferenceRequest.FromString,
          response_serializer=controller__pb2.InferenceResponse.SerializeToString,
      ),
      'Load': grpc.unary_unary_rpc_method_handler(
          servicer.Load,
          request_deserializer=controller__pb2.ModelManageRequest.FromString,
          response_serializer=controller__pb2.PotentialError.SerializeToString,
      ),
      'Unload': grpc.unary_unary_rpc_method_handler(
          servicer.Unload,
          request_deserializer=controller__pb2.ModelManageRequest.FromString,
          response_serializer=controller__pb2.PotentialError.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Controller', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Controller(object):
  """Missing associated documentation comment in .proto file"""

  @staticmethod
  def Infer(request,
      target,
      options=(),
      channel_credentials=None,
      call_credentials=None,
      compression=None,
      wait_for_ready=None,
      timeout=None,
      metadata=None):
    return grpc.experimental.unary_unary(request, target, '/Controller/Infer',
      controller__pb2.InferenceRequest.SerializeToString,
      controller__pb2.InferenceResponse.FromString,
      options, channel_credentials,
      call_credentials, compression, wait_for_ready, timeout, metadata)

  @staticmethod
  def Load(request,
      target,
      options=(),
      channel_credentials=None,
      call_credentials=None,
      compression=None,
      wait_for_ready=None,
      timeout=None,
      metadata=None):
    return grpc.experimental.unary_unary(request, target, '/Controller/Load',
      controller__pb2.ModelManageRequest.SerializeToString,
      controller__pb2.PotentialError.FromString,
      options, channel_credentials,
      call_credentials, compression, wait_for_ready, timeout, metadata)

  @staticmethod
  def Unload(request,
      target,
      options=(),
      channel_credentials=None,
      call_credentials=None,
      compression=None,
      wait_for_ready=None,
      timeout=None,
      metadata=None):
    return grpc.experimental.unary_unary(request, target, '/Controller/Unload',
      controller__pb2.ModelManageRequest.SerializeToString,
      controller__pb2.PotentialError.FromString,
      options, channel_credentials,
      call_credentials, compression, wait_for_ready, timeout, metadata)
