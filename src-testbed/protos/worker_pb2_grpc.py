# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import worker_pb2 as worker__pb2


class WorkerStub(object):
  """Missing associated documentation comment in .proto file."""

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Infer = channel.unary_unary(
        '/Worker/Infer',
        request_serializer=worker__pb2.InferenceRequest.SerializeToString,
        response_deserializer=worker__pb2.InferenceResponse.FromString,
        )
    self.Load = channel.unary_unary(
        '/Worker/Load',
        request_serializer=worker__pb2.ModelManageRequest.SerializeToString,
        response_deserializer=worker__pb2.ModelManageResponse.FromString,
        )
    self.Unload = channel.unary_unary(
        '/Worker/Unload',
        request_serializer=worker__pb2.ModelManageRequest.SerializeToString,
        response_deserializer=worker__pb2.ModelManageResponse.FromString,
        )
    self.GetMetrics = channel.unary_unary(
        '/Worker/GetMetrics',
        request_serializer=worker__pb2.MetricsRequest.SerializeToString,
        response_deserializer=worker__pb2.MetricsResponse.FromString,
        )


class WorkerServicer(object):
  """Missing associated documentation comment in .proto file."""

  def Infer(self, request, context):
    """Missing associated documentation comment in .proto file."""
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Load(self, request, context):
    """Missing associated documentation comment in .proto file."""
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Unload(self, request, context):
    """Missing associated documentation comment in .proto file."""
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetMetrics(self, request, context):
    """Missing associated documentation comment in .proto file."""
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_WorkerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Infer': grpc.unary_unary_rpc_method_handler(
          servicer.Infer,
          request_deserializer=worker__pb2.InferenceRequest.FromString,
          response_serializer=worker__pb2.InferenceResponse.SerializeToString,
      ),
      'Load': grpc.unary_unary_rpc_method_handler(
          servicer.Load,
          request_deserializer=worker__pb2.ModelManageRequest.FromString,
          response_serializer=worker__pb2.ModelManageResponse.SerializeToString,
      ),
      'Unload': grpc.unary_unary_rpc_method_handler(
          servicer.Unload,
          request_deserializer=worker__pb2.ModelManageRequest.FromString,
          response_serializer=worker__pb2.ModelManageResponse.SerializeToString,
      ),
      'GetMetrics': grpc.unary_unary_rpc_method_handler(
          servicer.GetMetrics,
          request_deserializer=worker__pb2.MetricsRequest.FromString,
          response_serializer=worker__pb2.MetricsResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Worker', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Worker(object):
  """Missing associated documentation comment in .proto file."""

  @staticmethod
  def Infer(request,
      target,
      options=(),
      channel_credentials=None,
      call_credentials=None,
      insecure=False,
      compression=None,
      wait_for_ready=None,
      timeout=None,
      metadata=None):
    return grpc.experimental.unary_unary(request, target, '/Worker/Infer',
      worker__pb2.InferenceRequest.SerializeToString,
      worker__pb2.InferenceResponse.FromString,
      options, channel_credentials,
      insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

  @staticmethod
  def Load(request,
      target,
      options=(),
      channel_credentials=None,
      call_credentials=None,
      insecure=False,
      compression=None,
      wait_for_ready=None,
      timeout=None,
      metadata=None):
    return grpc.experimental.unary_unary(request, target, '/Worker/Load',
      worker__pb2.ModelManageRequest.SerializeToString,
      worker__pb2.ModelManageResponse.FromString,
      options, channel_credentials,
      insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

  @staticmethod
  def Unload(request,
      target,
      options=(),
      channel_credentials=None,
      call_credentials=None,
      insecure=False,
      compression=None,
      wait_for_ready=None,
      timeout=None,
      metadata=None):
    return grpc.experimental.unary_unary(request, target, '/Worker/Unload',
      worker__pb2.ModelManageRequest.SerializeToString,
      worker__pb2.ModelManageResponse.FromString,
      options, channel_credentials,
      insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

  @staticmethod
  def GetMetrics(request,
      target,
      options=(),
      channel_credentials=None,
      call_credentials=None,
      insecure=False,
      compression=None,
      wait_for_ready=None,
      timeout=None,
      metadata=None):
    return grpc.experimental.unary_unary(request, target, '/Worker/GetMetrics',
      worker__pb2.MetricsRequest.SerializeToString,
      worker__pb2.MetricsResponse.FromString,
      options, channel_credentials,
      insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
